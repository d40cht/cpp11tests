import sys
import os.path


class NavStaticLibrary(object):
    def interfacePath( self ):
        return os.path.join( self.path, "interface" )
    
    def __init__( self, build, name, path, libDependencies ):
        self.name = name
        self.path = path
        
        localEnv = build.env.Clone()
        allIncludePaths = ["#" + self.interfacePath()] + ["#" + dep.interfacePath() for dep in libDependencies]
        localEnv.Append(CPPPATH = allIncludePaths)

        self.underlying = localEnv.StaticLibrary( name, Glob( os.path.join( path, "source", "*.cpp" ) ) )
        
        testPath = os.path.join( build.scriptRoot, self.path, "test" )
        if os.path.exists( testPath ):
            testName = name + "_test"
            testApp = NavApplication( build, testName, testPath, [self] + libDependencies )
            testAlias = Alias( testName, [testApp.underlying], testApp.underlying[0].abspath )
            build.allTests.append( (testName, testAlias) )
            AlwaysBuild( testAlias )
            
class NavApplication(object):
    def includePath( self ):
        return os.path.join( self.path, "include" )
        
    def __init__( self, build, name, path, libDependencies ):
        self.name = name
        self.path = path
        
        localEnv = build.env.Clone()
        allIncludePaths = ["#" + self.includePath()] + ["#" + dep.interfacePath() for dep in libDependencies]
        localEnv.Append(CPPPATH = allIncludePaths)

        self.underlying = localEnv.Program( name, Glob( os.path.join( path, "source", "*.cpp" ) ), LIBS=[dep.underlying for dep in libDependencies] )

class NavBuild(object):
    def __init__( self ):
        self.allTests = []
        self.env = Environment()
        self.env.Append(CXXFLAGS = '-std=c++11')
        self.env['CXX'] = "/usr/bin/g++-4.7"

        self.scriptRoot = Dir("#").abspath

    def staticLibrary( self, name, path, libDependencies ):
        return NavStaticLibrary( self, name, path, libDependencies )
        
    def application( self, name, path, libDependencies ):
        return NavApplication( self, name, path, libDependencies )
        
    def finalise( self ):
        allTestAlias = Alias( "test", [t for tn, t in self.allTests] )
        AlwaysBuild( allTestAlias )

nb = NavBuild()

# Declaration of libraries
utility = nb.staticLibrary( 'utility', 'libraries/utility', [] )
functionalCollections = nb.staticLibrary( 'functionalcollections', 'libraries/functionalcollections', [utility] )
dataStructures = nb.staticLibrary( 'datastructures', 'libraries/datastructures', [utility] )
program = nb.application( 'test', 'applications/simple', [utility, functionalCollections, dataStructures] )

nb.finalise()


